// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gpotato/v1/gpotato.proto

package gpotatov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GpotatoServiceClient is the client API for GpotatoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GpotatoServiceClient interface {
	// HelloWorld is the default rpc. Feel free to delete.
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
}

type gpotatoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGpotatoServiceClient(cc grpc.ClientConnInterface) GpotatoServiceClient {
	return &gpotatoServiceClient{cc}
}

func (c *gpotatoServiceClient) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/gpotato.v1.GpotatoService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpotatoServiceServer is the server API for GpotatoService service.
// All implementations must embed UnimplementedGpotatoServiceServer
// for forward compatibility
type GpotatoServiceServer interface {
	// HelloWorld is the default rpc. Feel free to delete.
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	mustEmbedUnimplementedGpotatoServiceServer()
}

// UnimplementedGpotatoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGpotatoServiceServer struct {
}

func (UnimplementedGpotatoServiceServer) HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedGpotatoServiceServer) mustEmbedUnimplementedGpotatoServiceServer() {
}

// UnsafeGpotatoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GpotatoServiceServer will
// result in compilation errors.
type UnsafeGpotatoServiceServer interface {
	mustEmbedUnimplementedGpotatoServiceServer()
}

func RegisterGpotatoServiceServer(s grpc.ServiceRegistrar, srv GpotatoServiceServer) {
	s.RegisterService(&GpotatoService_ServiceDesc, srv)
}

func _GpotatoService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpotatoServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpotato.v1.GpotatoService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpotatoServiceServer).HelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GpotatoService_ServiceDesc is the grpc.ServiceDesc for GpotatoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GpotatoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gpotato.v1.GpotatoService",
	HandlerType: (*GpotatoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _GpotatoService_HelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpotato/v1/gpotato.proto",
}
